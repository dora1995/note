Q：就是不明白为什么要用 Redux，更不清楚 Redux 到底解决了什么问题

### 一、背景与设计思想

#### Redux背后的架构思想——认识Flux架构

Redux 的设计在很大程度上受益于 Flux 架构，我们可以认为 Redux 是 Flux 的一种实现形式（虽然它并不严格遵循 Flux 的设定），理解 Flux 将帮助你更好地从抽象层面把握 Redux。

Flux 并不是一个具体的框架，它是一套由 Facebook 技术团队提出的应用架构，这套架构约束的是应用处理数据的模式。在 Flux 架构中，一个应用将被拆分为以下4个部分：
- View：用户界面，任何形式
- Action：视图层发出消息，触发状态的改变
- Dispatcher：负责对action的分发
- Store：存储应用状态的“仓库“，最终会映射到view上

一个典型的 Flux 工作流是这样的：用户与 View 之间产生交互，通过 View 发起一个 Action；Dispatcher 会把这个 Action 派发给 Store，通知 Store 进行相应的状态更新。Store 状态更新完成后，会进一步通知 View 去更新界面

所有的流向都是单向的，所以叫单向数据流
